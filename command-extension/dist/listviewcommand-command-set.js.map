{"version":3,"sources":["webpack:///../webpack/bootstrap","webpack:///.././src/extensions/listviewcommand/ListviewcommandCommandSet.ts","webpack:///../external \"@microsoft/decorators\"","webpack:///../external \"@microsoft/sp-core-library\"","webpack:///../external \"@microsoft/sp-dialog\"","webpack:///../external \"@microsoft/sp-listview-extensibility\""],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClFiD;AACA;AAMH;AACA;AAe9C,IAAM,UAAU,GAAW,2BAA2B,CAAC;AAEvD;IAAuD,6CAA4D;IAAnH;;IA8BA,CAAC;IA3BQ,0CAAM,GAAb;QACE,8DAAG,CAAC,IAAI,CAAC,UAAU,EAAE,uCAAuC,CAAC,CAAC;QAC9D,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAGM,qDAAiB,GAAxB,UAAyB,KAAmD;QAC1E,IAAM,iBAAiB,GAAY,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;QACnE,IAAI,iBAAiB,EAAE;YACrB,oEAAoE;YACpE,iBAAiB,CAAC,OAAO,GAAG,KAAK,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC,CAAC;SAC7D;IACH,CAAC;IAGM,6CAAS,GAAhB,UAAiB,KAAgD;QAC/D,QAAQ,KAAK,CAAC,MAAM,EAAE;YACpB,KAAK,WAAW;gBACd,2DAAM,CAAC,KAAK,CAAC,KAAG,IAAI,CAAC,UAAU,CAAC,aAAe,CAAC,CAAC;gBACjD,MAAM;YACR,KAAK,WAAW;gBACd,2DAAM,CAAC,KAAK,CAAC,KAAG,IAAI,CAAC,UAAU,CAAC,aAAe,CAAC,CAAC;gBACjD,MAAM;YACR;gBACE,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;SACtC;IACH,CAAC;IA1BD;QADC,8DAAQ;2DAIR;IAGD;QADC,8DAAQ;sEAOR;IAGD;QADC,8DAAQ;8DAYR;IACH,gCAAC;CAAA,CA9BsD,2FAAsB,GA8B5E;AA9BoB,wFAAyB;;;;;;;;;;;;ACzB9C,mE;;;;;;;;;;;ACAA,wE;;;;;;;;;;;ACAA,kE;;;;;;;;;;;ACAA,kF","file":"listviewcommand-command-set.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./lib/extensions/listviewcommand/ListviewcommandCommandSet.js\");\n","import { override } from '@microsoft/decorators';\r\nimport { Log } from '@microsoft/sp-core-library';\r\nimport {\r\n  BaseListViewCommandSet,\r\n  Command,\r\n  IListViewCommandSetListViewUpdatedParameters,\r\n  IListViewCommandSetExecuteEventParameters\r\n} from '@microsoft/sp-listview-extensibility';\r\nimport { Dialog } from '@microsoft/sp-dialog';\r\n\r\nimport * as strings from 'ListviewcommandCommandSetStrings';\r\n\r\n/**\r\n * If your command set uses the ClientSideComponentProperties JSON input,\r\n * it will be deserialized into the BaseExtension.properties object.\r\n * You can define an interface to describe it.\r\n */\r\nexport interface IListviewcommandCommandSetProperties {\r\n  // This is an example; replace with your own properties\r\n  sampleTextOne: string;\r\n  sampleTextTwo: string;\r\n}\r\n\r\nconst LOG_SOURCE: string = 'ListviewcommandCommandSet';\r\n\r\nexport default class ListviewcommandCommandSet extends BaseListViewCommandSet<IListviewcommandCommandSetProperties> {\r\n\r\n  @override\r\n  public onInit(): Promise<void> {\r\n    Log.info(LOG_SOURCE, 'Initialized ListviewcommandCommandSet');\r\n    return Promise.resolve();\r\n  }\r\n\r\n  @override\r\n  public onListViewUpdated(event: IListViewCommandSetListViewUpdatedParameters): void {\r\n    const compareOneCommand: Command = this.tryGetCommand('COMMAND_1');\r\n    if (compareOneCommand) {\r\n      // This command should be hidden unless exactly one row is selected.\r\n      compareOneCommand.visible = event.selectedRows.length === 1;\r\n    }\r\n  }\r\n\r\n  @override\r\n  public onExecute(event: IListViewCommandSetExecuteEventParameters): void {\r\n    switch (event.itemId) {\r\n      case 'COMMAND_1':\r\n        Dialog.alert(`${this.properties.sampleTextOne}`);\r\n        break;\r\n      case 'COMMAND_2':\r\n        Dialog.alert(`${this.properties.sampleTextTwo}`);\r\n        break;\r\n      default:\r\n        throw new Error('Unknown command');\r\n    }\r\n  }\r\n}\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__microsoft_decorators__;","module.exports = __WEBPACK_EXTERNAL_MODULE__microsoft_sp_core_library__;","module.exports = __WEBPACK_EXTERNAL_MODULE__microsoft_sp_dialog__;","module.exports = __WEBPACK_EXTERNAL_MODULE__microsoft_sp_listview_extensibility__;"],"sourceRoot":""}